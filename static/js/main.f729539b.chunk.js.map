{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleClick","newRandomNumber","Math","floor","random","state","quotes","length","setState","text","author","isLoading","randomNumber","this","fetch","then","response","json","data","newData","filter","x","className","id","href","target","rel","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iOA+EeA,EA7Ef,kDACE,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IA6BRC,YAAc,WACd,IAAMC,EAAkBC,KAAKC,MAAMD,KAAKE,SAAS,EAAKC,MAAMC,OAAOC,QACnE,EAAKC,SAAS,CACZC,KAAM,EAAKJ,MAAMC,OAAOL,GAAiBQ,KACzCC,OAAQ,EAAKL,MAAMC,OAAOL,GAAiBS,UAhC3C,EAAKL,MAAM,CACTI,KAAM,GACNC,OAAQ,GACRJ,OAAQ,GACRK,WAAW,GANG,EADpB,gEAWsB,IAAD,OACZC,EAAeV,KAAKC,MAAMD,KAAKE,SAASS,KAAKR,MAAMC,OAAOC,QAEhEO,MAAM,+BACJC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAEJ,IAAMC,EAAQD,EAAKE,QAAO,SAAUC,GACpC,OAAmB,MAAZA,EAAEX,UAGT,EAAKF,SAAS,CACZF,OAAQa,EACRV,KAAMS,EAAKN,GAAcH,KACzBC,OAAQQ,EAAKN,GAAcF,OAC3BC,WAAW,SA1BnB,+BAyCI,OAAOE,KAAKR,MAAMM,UAChB,yBAAKW,UAAU,QACb,yBAAKA,UAAU,4BACb,wBAAIA,UAAU,YAAd,sBAEF,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,6CAIjB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,YAAd,sBAEF,yBAAKA,UAAU,aAAaC,GAAG,aAC7B,wBAAID,UAAU,cAAcC,GAAG,QAAO,uBACpCD,UAAU,+BADZ,IAC+CT,KAAKR,MAAMI,MAE1D,wBAAIa,UAAU,kBAAkBC,GAAG,UAAnC,IAA8CV,KAAKR,MAAMK,QACzD,4BAAQY,UAAU,WAChB,uBAAGA,UAAU,uBAAsBC,GAAG,cACpCC,KAAI,gDAA2CX,KAAKR,MAAMI,KAAtD,aAA+DI,KAAKR,MAAMK,QAC9Ee,OAAO,SAASC,IAAI,uBAClB,uBAAGJ,UAAU,wBAHjB,WAMA,4BAAQA,UAAU,SAChBC,GAAG,YAAWI,QAASd,KAAKb,aAD9B,cAIF,4BAAQsB,UAAU,eAAlB,wBAvEV,GAAyBM,aCULC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f729539b.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      text: [],\n      author: [],\n      quotes: [],\n      isLoading: true\n    }\n  }\n\n  componentDidMount(){ \n   const randomNumber = Math.floor(Math.random()*this.state.quotes.length)\n\n   fetch(\"https://type.fit/api/quotes\")\n    .then(response=>response.json())\n    .then(data=>{\n      \n      const newData=data.filter(function (x){\n      return x.author != null\n      })\n  \n      this.setState({\n        quotes: newData,\n        text: data[randomNumber].text,\n        author: data[randomNumber].author,\n        isLoading: false\n        })\n    })\n  }\n\n  handleClick = () => {\n  const newRandomNumber = Math.floor(Math.random()*this.state.quotes.length)\n  this.setState({\n    text: this.state.quotes[newRandomNumber].text,\n    author: this.state.quotes[newRandomNumber].author\n    })\n  }\n   \n  \n  render() {\n    return this.state.isLoading? (\n      <div className=\"main\">\n        <div className=\"container center heading\">\n          <h1 className=\"big-text\">The Quote Tweeter</h1>\n        </div>\n        <div className=\"container center\">\n          <i className=\"loading spinner fas fa-spinner fa-spin\"></i>\n        </div>\n      </div>\n      ): (\n      <div className=\"main\">\n        <div className=\" heading\">\n          <h1 className=\"big-text\">The Quote Tweeter</h1>\n        </div>\n        <div className=\" lightblue\" id=\"quote-box\">\n          <h2 className=\"quote-text \" id=\"text\"><i \n            className=\"darkblue fas fa-quote-left\"></i> {this.state.text}\n            </h2>\n          <h4 className=\"darkblue author\" id=\"author\">-{this.state.author}</h4>\n          <button className=\"button \">\n            <a className=\"twitter-share-button\"id=\"tweet-quote\"  \n              href={`https://twitter.com/intent/tweet?text=${this.state.text}--${this.state.author}`} \n              target=\"_blank\" rel=\"noopener noreferrer\">\n                <i className=\"bird fab fa-twitter\"></i> Tweet  \n              </a>\n            </button>\n            <button className=\"button\"\n              id=\"new-quote\"onClick={this.handleClick}>New Quote\n                </button>\n          </div>\n          <footer className=\"footer-text\">by Joss Gantley</footer>\n        </div>\n    )\n  }\n}\n\nexport default App \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}